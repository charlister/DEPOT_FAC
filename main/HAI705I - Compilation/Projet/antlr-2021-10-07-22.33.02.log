2021-10-07 22:33:01:954 grammar LogManager.java:25 before: (COMBINED_GRAMMAR GPP (RULES (RULE type (BLOCK (ALT 'integer') (ALT 'boolean') (ALT 'array' 'of' type))) (RULE constante (BLOCK (ALT Int) (ALT 'true') (ALT 'false'))) (RULE Int (BLOCK (ALT Number) (ALT '-' Number))) (RULE Number (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE uop (BLOCK (ALT '-') (ALT 'not'))) (RULE bop (BLOCK (ALT '+') (ALT '-') (ALT '*') (ALT '/') (ALT 'and') (ALT 'or') (ALT '<') (ALT '<=') (ALT '=') (ALT '!=') (ALT '>=') (ALT '>'))) (RULE target (BLOCK (ALT 'read') (ALT 'write') (ALT func))) (RULE func (BLOCK (ALT (+ (BLOCK (ALT Name))) '(' (* (BLOCK (ALT expr))) ')'))) (RULE Name (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z_])))))) (RULE expr (BLOCK (ALT constante) (ALT uop expr) (ALT expr bop expr))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-10-07 22:33:01:976 grammar LogManager.java:25 after: (COMBINED_GRAMMAR GPP (RULES (RULE type (BLOCK (ALT 'integer') (ALT 'boolean') (ALT 'array' 'of' type))) (RULE constante (BLOCK (ALT (SET Int 'true' 'false')))) (RULE Int (BLOCK (ALT Number) (ALT '-' Number))) (RULE Number (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE uop (BLOCK (ALT (SET '-' 'not')))) (RULE bop (BLOCK (ALT (SET '+' '-' '*' '/' 'and' 'or' '<' '<=' '=' '!=' '>=' '>')))) (RULE target (BLOCK (ALT 'read') (ALT 'write') (ALT func))) (RULE func (BLOCK (ALT (+ (BLOCK (ALT Name))) '(' (* (BLOCK (ALT expr))) ')'))) (RULE Name (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z_])))))) (RULE expr (BLOCK (ALT constante) (ALT uop expr) (ALT expr bop expr))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-10-07 22:33:02:010 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR GPP (RULES (RULE type (BLOCK (ALT 'integer') (ALT 'boolean') (ALT 'array' 'of' type))) (RULE constante (BLOCK (ALT (SET Int 'true' 'false')))) (RULE uop (BLOCK (ALT (SET '-' 'not')))) (RULE bop (BLOCK (ALT (SET '+' '-' '*' '/' 'and' 'or' '<' '<=' '=' '!=' '>=' '>')))) (RULE target (BLOCK (ALT 'read') (ALT 'write') (ALT func))) (RULE func (BLOCK (ALT (+ (BLOCK (ALT Name))) '(' (* (BLOCK (ALT expr))) ')'))) (RULE expr (BLOCK (ALT constante) (ALT uop expr) (ALT expr bop expr)))))
2021-10-07 22:33:02:010 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GPPLexer (RULES (RULE T__0 (BLOCK (ALT 'integer'))) (RULE T__1 (BLOCK (ALT 'boolean'))) (RULE T__2 (BLOCK (ALT 'array'))) (RULE T__3 (BLOCK (ALT 'of'))) (RULE T__4 (BLOCK (ALT 'true'))) (RULE T__5 (BLOCK (ALT 'false'))) (RULE T__6 (BLOCK (ALT '-'))) (RULE T__7 (BLOCK (ALT 'not'))) (RULE T__8 (BLOCK (ALT '+'))) (RULE T__9 (BLOCK (ALT '*'))) (RULE T__10 (BLOCK (ALT '/'))) (RULE T__11 (BLOCK (ALT 'and'))) (RULE T__12 (BLOCK (ALT 'or'))) (RULE T__13 (BLOCK (ALT '<'))) (RULE T__14 (BLOCK (ALT '<='))) (RULE T__15 (BLOCK (ALT '='))) (RULE T__16 (BLOCK (ALT '!='))) (RULE T__17 (BLOCK (ALT '>='))) (RULE T__18 (BLOCK (ALT '>'))) (RULE T__19 (BLOCK (ALT 'read'))) (RULE T__20 (BLOCK (ALT 'write'))) (RULE T__21 (BLOCK (ALT '('))) (RULE T__22 (BLOCK (ALT ')'))) (RULE Int (BLOCK (ALT Number) (ALT '-' Number))) (RULE Number (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE Name (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z_])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-10-07 22:33:02:733 left-recursion LogManager.java:25 expr
    :   ( {} constante<tokenIndex=164> 
        | uop<tokenIndex=168> expr<tokenIndex=170,p=2> 
        )
        (
          {precpred(_ctx, 1)}?<p=1> bop<tokenIndex=176> expr<tokenIndex=178,p=2>
        )*
    ;
2021-10-07 22:33:02:741 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (constante (ELEMENT_OPTIONS (= tokenIndex 164)))) (ALT (uop (ELEMENT_OPTIONS (= tokenIndex 168))) (expr (ELEMENT_OPTIONS (= tokenIndex 170) (= p 2))))) (* (BLOCK (ALT ({precpred(_ctx, 1)}? (ELEMENT_OPTIONS (= p 1))) (bop (ELEMENT_OPTIONS (= tokenIndex 176))) (expr (ELEMENT_OPTIONS (= tokenIndex 178) (= p 2)))))))))
2021-10-07 22:33:02:743 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, Int=24, Number=25, Name=26, WS=27}
2021-10-07 22:33:02:743 semantics LogManager.java:25 strings={'integer'=1, 'boolean'=2, 'array'=3, 'of'=4, 'true'=5, 'false'=6, '-'=7, 'not'=8, '+'=9, '*'=10, '/'=11, 'and'=12, 'or'=13, '<'=14, '<='=15, '='=16, '!='=17, '>='=18, '>'=19, 'read'=20, 'write'=21, '('=22, ')'=23}
2021-10-07 22:33:02:756 LL1 LogManager.java:25 
DECISION 0 in rule type
2021-10-07 22:33:02:756 LL1 LogManager.java:25 look=[1, 2, 3]
2021-10-07 22:33:02:757 LL1 LogManager.java:25 LL(1)? true
2021-10-07 22:33:02:757 LL1 LogManager.java:25 
DECISION 1 in rule target
2021-10-07 22:33:02:757 LL1 LogManager.java:25 look=[20, 21, 26]
2021-10-07 22:33:02:757 LL1 LogManager.java:25 LL(1)? true
2021-10-07 22:33:02:757 LL1 LogManager.java:25 
DECISION 2 in rule func
2021-10-07 22:33:02:757 LL1 LogManager.java:25 look=[26, 22]
2021-10-07 22:33:02:757 LL1 LogManager.java:25 LL(1)? true
2021-10-07 22:33:02:757 LL1 LogManager.java:25 
DECISION 3 in rule func
2021-10-07 22:33:02:757 LL1 LogManager.java:25 look=[{5..8, 24}, 23]
2021-10-07 22:33:02:758 LL1 LogManager.java:25 LL(1)? true
2021-10-07 22:33:02:758 LL1 LogManager.java:25 
DECISION 4 in rule expr
2021-10-07 22:33:02:758 LL1 LogManager.java:25 look=[{5..6, 24}, {7..8}]
2021-10-07 22:33:02:758 LL1 LogManager.java:25 LL(1)? true
2021-10-07 22:33:02:758 LL1 LogManager.java:25 
DECISION 5 in rule expr
2021-10-07 22:33:02:758 LL1 LogManager.java:25 look=[null, null]
2021-10-07 22:33:02:758 LL1 LogManager.java:25 LL(1)? false
2021-10-07 22:33:02:830 action-translator LogManager.java:25 translate 
2021-10-07 22:33:02:832 action-translator LogManager.java:25 translate precpred(_ctx, 1)
2021-10-07 22:33:02:838 action-translator LogManager.java:25 translate precpred(_ctx, 1)
