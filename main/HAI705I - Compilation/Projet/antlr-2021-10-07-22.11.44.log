2021-10-07 22:11:43:961 grammar LogManager.java:25 before: (COMBINED_GRAMMAR GPP (RULES (RULE type (BLOCK (ALT 'integer') (ALT 'boolean') (ALT 'array' 'of' type))) (RULE constante (BLOCK (ALT Int) (ALT 'true') (ALT 'false'))) (RULE Int (BLOCK (ALT Number) (ALT '-' Number))) (RULE Number (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE uop (BLOCK (ALT '-') (ALT 'not'))) (RULE bop (BLOCK (ALT '+') (ALT '-') (ALT '*') (ALT '/') (ALT 'and') (ALT 'or') (ALT '<') (ALT '<=') (ALT '=') (ALT '!=') (ALT '>=') (ALT '>'))) (RULE target (BLOCK (ALT 'read') (ALT 'write') (ALT Func))) (RULE Func (BLOCK (ALT (+ (BLOCK (ALT [a-z]))) '(' (* (BLOCK (ALT expr))) ')'))) (RULE expr (BLOCK (ALT constante) (ALT uop constante) (ALT expr bop expr))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-10-07 22:11:43:982 grammar LogManager.java:25 after: (COMBINED_GRAMMAR GPP (RULES (RULE type (BLOCK (ALT 'integer') (ALT 'boolean') (ALT 'array' 'of' type))) (RULE constante (BLOCK (ALT (SET Int 'true' 'false')))) (RULE Int (BLOCK (ALT Number) (ALT '-' Number))) (RULE Number (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE uop (BLOCK (ALT (SET '-' 'not')))) (RULE bop (BLOCK (ALT (SET '+' '-' '*' '/' 'and' 'or' '<' '<=' '=' '!=' '>=' '>')))) (RULE target (BLOCK (ALT (SET 'read' 'write' Func)))) (RULE Func (BLOCK (ALT (+ (BLOCK (ALT [a-z]))) '(' (* (BLOCK (ALT expr))) ')'))) (RULE expr (BLOCK (ALT constante) (ALT uop constante) (ALT expr bop expr))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-10-07 22:11:44:018 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR GPP (RULES (RULE type (BLOCK (ALT 'integer') (ALT 'boolean') (ALT 'array' 'of' type))) (RULE constante (BLOCK (ALT (SET Int 'true' 'false')))) (RULE uop (BLOCK (ALT (SET '-' 'not')))) (RULE bop (BLOCK (ALT (SET '+' '-' '*' '/' 'and' 'or' '<' '<=' '=' '!=' '>=' '>')))) (RULE target (BLOCK (ALT (SET 'read' 'write' Func)))) (RULE expr (BLOCK (ALT constante) (ALT uop constante) (ALT expr bop expr)))))
2021-10-07 22:11:44:019 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR GPPLexer (RULES (RULE T__0 (BLOCK (ALT 'integer'))) (RULE T__1 (BLOCK (ALT 'boolean'))) (RULE T__2 (BLOCK (ALT 'array'))) (RULE T__3 (BLOCK (ALT 'of'))) (RULE T__4 (BLOCK (ALT 'true'))) (RULE T__5 (BLOCK (ALT 'false'))) (RULE T__6 (BLOCK (ALT '-'))) (RULE T__7 (BLOCK (ALT 'not'))) (RULE T__8 (BLOCK (ALT '+'))) (RULE T__9 (BLOCK (ALT '*'))) (RULE T__10 (BLOCK (ALT '/'))) (RULE T__11 (BLOCK (ALT 'and'))) (RULE T__12 (BLOCK (ALT 'or'))) (RULE T__13 (BLOCK (ALT '<'))) (RULE T__14 (BLOCK (ALT '<='))) (RULE T__15 (BLOCK (ALT '='))) (RULE T__16 (BLOCK (ALT '!='))) (RULE T__17 (BLOCK (ALT '>='))) (RULE T__18 (BLOCK (ALT '>'))) (RULE T__19 (BLOCK (ALT 'read'))) (RULE T__20 (BLOCK (ALT 'write'))) (RULE Int (BLOCK (ALT Number) (ALT '-' Number))) (RULE Number (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE Func (BLOCK (ALT (+ (BLOCK (ALT [a-z]))) '(' (* (BLOCK (ALT expr))) ')'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-10-07 22:11:44:262 left-recursion LogManager.java:25 expr
    :   ( {} constante<tokenIndex=158> 
        | uop<tokenIndex=162> constante<tokenIndex=164> 
        )
        (
          {precpred(_ctx, 1)}?<p=1> bop<tokenIndex=170> expr<tokenIndex=172,p=2>
        )*
    ;
2021-10-07 22:11:44:271 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (constante (ELEMENT_OPTIONS (= tokenIndex 158)))) (ALT (uop (ELEMENT_OPTIONS (= tokenIndex 162))) (constante (ELEMENT_OPTIONS (= tokenIndex 164))))) (* (BLOCK (ALT ({precpred(_ctx, 1)}? (ELEMENT_OPTIONS (= p 1))) (bop (ELEMENT_OPTIONS (= tokenIndex 170))) (expr (ELEMENT_OPTIONS (= tokenIndex 172) (= p 2)))))))))
2021-10-07 22:11:44:414 semantics LogManager.java:25 tokens={EOF=-1, Int=1, Func=2}
2021-10-07 22:11:44:414 semantics LogManager.java:25 strings={}
